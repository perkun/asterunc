#!/bin/python

import argparse
from os import system as cmd
from os import mkdir, listdir

class AxisLabel:
    def __init__(self, label, pos_x, pos_y):
        self.label = label
        self.pos_x = pos_x
        self.pos_y = pos_y


class Projection:
    def __init__(self, name, axis_label_a, axis_label_b):
        self.name = name
        self.axis_labels = []
        self.axis_labels.append(axis_label_a)
        self.axis_labels.append(axis_label_b)


def make_scale(bg_width, scale_width, scale_height, color_start, color_end, text,
               pointsize, max_percent, out_fn):
    cmd(f"convert -size {bg_width}x{pointsize*2} canvas:white PNG24:bg.png")

    cmd(f"convert -size {scale_width}x{scale_height} "
            "-define gradient:direction=east "
            f"gradient:{color_start}-{color_end} scale.png")

    # add text "... uncertainty"
    cmd(f"convert scale.png -pointsize {pointsize} "
        "-fill white -gravity center "
        f"-annotate 0 '{text}' scale.png")

    # overlay on background
    cmd(f"composite -gravity center scale.png bg.png {out_fn}")

    # annotate with range text
    cmd(f"convert {out_fn} -pointsize {pointsize} -gravity center "
        f"-annotate -{scale_width/2 + 100}+0 '0 %' "
        f"-annotate +{scale_width/2 + 150}+0 '> {max_percent} %' {out_fn}")


def main():
    BLUR_KERNEL_SIZE = 10
    TEXTURE_WIDTH = 300
    TEXTURE_HEIGHT = 300
    PROJ_WIDTH = 600
    PROJ_HEIGHT = 600
    POINTSIZE = 70
    RANGE = 0.1

    parser = argparse.ArgumentParser(
            description='''Make projections with uncertainty maps''')
    parser.add_argument("model", help="SHP model filename", type=str)
    parser.add_argument("errors", help="file with uncertainties", type=str)
    parser.add_argument(
        "-r",
        "--range",
        help="Specify max value. Values above the range will be truncated to range value.",
        type=float,
        required=False)



    parser.add_argument("-i", "--info", help="Display info and exit",
            required=False, action='store_true')
    parser.add_argument("--no-cleanup",
            help="do not remove intermidiate-step images", action='store_true',
            required=False)
    parser.add_argument("--font-size", help="Font size", default=70, type=int,
            required=False)
    parser.add_argument("--rotate",
                       help="rotate body about z axis by an angle in degrees",
                       type=float, required=False, default=0.0)

    args = parser.parse_args()

    POINTSIZE = args.font_size
    ROTATION = args.rotate


    if args.info:
        cmd(f"asterunc --model {args.model} --errors {args.errors} -i")
        return

    if "textures" not in listdir():
        mkdir("textures")

    if "projections" not in listdir():
        mkdir("projections")

    if args.range:
        RANGE = args.range


    # run asterunc to make textures
    cmd(f"asterunc --model {args.model} --errors {args.errors} -r {RANGE} "
        f"-o textures/texture -W {TEXTURE_WIDTH} -H {TEXTURE_HEIGHT} "
        f"-b {BLUR_KERNEL_SIZE} "
        f" --rotate {ROTATION} "
        f"--obj-out model")

    # run meshview to make projections

    left = 5
    right = (int)(PROJ_WIDTH - POINTSIZE/2)
    top = (int)(POINTSIZE/2 + 10)
    bottom = (int)(PROJ_HEIGHT - POINTSIZE/2)
    middle_x = (int)(PROJ_WIDTH/2 - POINTSIZE/2 - 10)
    middle_y = (int)(PROJ_HEIGHT/2 - POINTSIZE/2 + 10)

    projections = [
            Projection("x",
                AxisLabel("y", right, middle_y), AxisLabel("z", middle_x, top)),
            Projection("nx",
                AxisLabel("y", left, middle_y), AxisLabel("z", middle_x, top)),
            Projection("y",
                AxisLabel("x", left, middle_y), AxisLabel("z", middle_x, top)),
            Projection("ny",
                AxisLabel("x", right, middle_y), AxisLabel("z", middle_x, top)),
            Projection("z",
                AxisLabel("x", right, middle_y), AxisLabel("y", middle_x, top)),
            Projection("nz",
                AxisLabel("x", right, middle_y), AxisLabel("y", middle_x, bottom))]


    for proj in projections:
        cmd(f"meshview model.obj -t textures/texture_plus.png -p {proj.name} "
            f"--prefix projections/proj_plus -W {PROJ_WIDTH} -H {PROJ_HEIGHT}")

        cmd(f"meshview model.obj -t textures/texture_minus.png -p {proj.name} "
            f"--prefix projections/proj_minus -W {PROJ_WIDTH} -H {PROJ_HEIGHT}")

        # annotate axes
        label_a = proj.axis_labels[0]
        label_b = proj.axis_labels[1]
        for core_fn in ["proj_plus", "proj_minus"]:
            filename = f"projections/{core_fn}_{proj.name}.png"
            cmd(f"convert {filename} "
                f"-pointsize {POINTSIZE} "
                f"-annotate +{label_a.pos_x}+{label_a.pos_y} '{label_a.label}' "
                f"-annotate +{label_b.pos_x}+{label_b.pos_y} '{label_b.label}' "
                f"{filename}")





    # combine images
    for core_fn in ["proj_plus", "proj_minus"]:
        folder = "projections"
        prefix = folder + "/" + core_fn + "_"

        paths = " ".join([prefix + i + ".png" for i in ["ny", "x", "z"]])
        cmd(f"convert +append {paths} row1.png")

        paths = " ".join([prefix + i + ".png" for i in ["y", "nx", "nz"]])
        cmd(f"convert +append {paths} row2.png")

        cmd(f"convert -append row1.png row2.png projections/{core_fn}.png")

    # annotate plots: ranges
    height = POINTSIZE * 2
    scale_width = (int)(POINTSIZE * 13)
    scale_height = (int)(height * 0.6)

    make_scale(
        bg_width=PROJ_WIDTH * 3,
        scale_width=scale_width,
        scale_height=scale_height,
        color_start="#00FF00",
        color_end="#FF0000",
        text="positive uncertainty",
        pointsize=POINTSIZE,
        max_percent=(int)(RANGE * 100),
        out_fn="red.png")

    make_scale(
        bg_width=PROJ_WIDTH * 3,
        scale_width=scale_width,
        scale_height=scale_height,
        color_start="#00FF00",
        color_end="#0000FF",
        text="negative uncertainty",
        pointsize=POINTSIZE,
        max_percent=(int)(RANGE * 100),
        out_fn="blue.png")

    ## combine
    cmd(f"convert -append projections/proj_plus.png red.png "
        "projections/proj_plus.png")
    cmd(f"convert -append projections/proj_minus.png blue.png "
        "projections/proj_minus.png")


    # cleanup
    if not args.no_cleanup:
        cmd("rm row1.png row2.png bg.png blue.png red.png scale.png")
        cmd("rm projections/proj_minus_* projections/proj_plus_*")


if __name__ == "__main__":
    main()
