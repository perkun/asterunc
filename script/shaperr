#!/bin/python

import argparse
from os import system as cmd
from os import mkdir, listdir

class AxisLabel:
    def __init__(self, label, pos_x, pos_y):
        self.label = label
        self.pos_x = pos_x
        self.pos_y = pos_y


class Projection:
    def __init__(self, name, axis_label_a, axis_label_b):
        self.name = name
        self.axis_labels = []
        self.axis_labels.append(axis_label_a)
        self.axis_labels.append(axis_label_b)




def main():
    BLUR_KERNEL_SIZE = 10
    TEXTURE_WIDTH = 300
    TEXTURE_HEIGHT = 300
    PROJ_WIDTH = 600
    PROJ_HEIGHT = 600
    POINTSIZE = PROJ_HEIGHT // 25
    RANGE = 0.1

    parser = argparse.ArgumentParser(
            description='''Make projections with uncertainty maps''')
    parser.add_argument("model", help="SHP model filename", type=str)
    parser.add_argument("errors", help="file with uncertainties", type=str)
    parser.add_argument(
        "-r",
        "--range",
        help="Specify max value. Values above the range will be truncated to range value.",
        type=float,
        required=False)



    parser.add_argument("-i", "--info", help="Display info and exit",
            required=False, action='store_true')
#     parser.add_argument("-a", "--auto-range", help="Auto max range",
#             required=False, action='store_true')

    args = parser.parse_args()


    if args.info:
        cmd(f"asterunc --model {args.model} --errors {args.errors} -i")
        return

    if "textures" not in listdir():
        mkdir("textures")

    if "projections" not in listdir():
        mkdir("projections")

    if args.range:
        RANGE = args.range


    # run asterunc to make textures
    cmd(f"asterunc --model {args.model} --errors {args.errors} -r {RANGE} "
        f"-o textures/texture -W {TEXTURE_WIDTH} -H {TEXTURE_HEIGHT} "
        f"-b {BLUR_KERNEL_SIZE} "
        f"--obj-out model")

    # run meshview to make projections

    projections = [
            Projection("x", AxisLabel("y", 570, 290), AxisLabel("z", 270, 30)),
            Projection("nx", AxisLabel("y", 10, 290), AxisLabel("z", 270, 30)),
            Projection("y", AxisLabel("x", 10, 290), AxisLabel("z", 270, 30)),
            Projection("ny", AxisLabel("x", 570, 290), AxisLabel("z", 270, 30)),
            Projection("z", AxisLabel("x", 570, 290), AxisLabel("y", 270, 30)),
            Projection("nz", AxisLabel("x", 570, 290), AxisLabel("z", 270, 580))]


    for proj in projections:
        cmd(f"meshview model.obj -t textures/texture_plus.png -p {proj.name} "
            f"--prefix projections/proj_plus -W {PROJ_WIDTH} -H {PROJ_HEIGHT}")

        cmd(f"meshview model.obj -t textures/texture_minus.png -p {proj.name} "
            f"--prefix projections/proj_minus -W {PROJ_WIDTH} -H {PROJ_HEIGHT}")

        # annotate axes
        label_a = proj.axis_labels[0]
        label_b = proj.axis_labels[1]
        for core_fn in ["proj_plus", "proj_minus"]:
            filename = f"projections/{core_fn}_{proj.name}.png"
            cmd(f"convert {filename} "
                f"-pointsize 50 "
                f"-annotate +{label_a.pos_x}+{label_a.pos_y} '{label_a.label}' "
                f"-annotate +{label_b.pos_x}+{label_b.pos_y} '{label_b.label}' "
                f"{filename}")





    # combine images
    for core_fn in ["proj_plus", "proj_minus"]:
        folder = "projections"
        prefix = folder + "/" + core_fn + "_"

        paths = " ".join([prefix + i + ".png" for i in ["ny", "x", "z"]])
        cmd(f"convert +append {paths} row1.png")

        paths = " ".join([prefix + i + ".png" for i in ["y", "nx", "nz"]])
        cmd(f"convert +append {paths} row2.png")

        cmd(f"convert -append row1.png row2.png projections/{core_fn}.png")

    # annotate plots: ranges

    ## crate gradient scales
    ### canvas:
    cmd(f"convert -size 1800x100 canvas:white PNG24:bg.png")
    # RED
    cmd("convert -size 740x60 -define gradient:direction=east "
        "gradient:#00FF00-#FF0000 scale_red.png")
    cmd("composite -gravity center scale_red.png bg.png red.png")
    # BLUE
    cmd("convert -size 740x60 -define gradient:direction=east "
        "gradient:#00FF00-#0000FF scale_blue.png")
    cmd("composite -gravity center scale_blue.png bg.png blue.png")

    ### find max percentage
    max_percent = (int)(RANGE * 100)
    cmd("convert red.png -pointsize 50 "
        f"-annotate +400+65 '0 %' -annotate +1315+65 '{max_percent} %' red.png")
    cmd("convert blue.png -pointsize 50 "
        f"-annotate +400+65 '0 %' -annotate +1315+65 '{max_percent} %' blue.png")
    ## combine
    cmd(f"convert -append projections/proj_plus.png red.png projections/proj_plus.png")
    cmd(f"convert -append projections/proj_minus.png blue.png projections/proj_minus.png")


    # cleanup
    cmd("rm row1.png row2.png bg.png blue.png red.png scale_blue.png scale_red.png")
    cmd("rm projections/proj_minus_* projections/proj_plus_*")


if __name__ == "__main__":
    main()
